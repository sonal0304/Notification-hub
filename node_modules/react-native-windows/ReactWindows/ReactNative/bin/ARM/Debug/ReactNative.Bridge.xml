<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ReactNative.Bridge</name>
    </assembly>
    <members>
        <member name="T:ReactNative.Bridge.CompiledReactDelegateFactory">
            <summary>
            A delegate factory that will compile a delegate to call the native method.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.CompiledReactDelegateFactory.Instance">
            <summary>
            The <see cref="T:ReactNative.Bridge.CompiledReactDelegateFactory"/> instance.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.CompiledReactDelegateFactory.Create(ReactNative.Bridge.INativeModule,System.Reflection.MethodInfo)">
            <summary>
            Create an invocation delegate from the given method.
            </summary>
            <param name="module">The native module instance.</param>
            <param name="method">The method.</param>
            <returns>The invocation delegate.</returns>
        </member>
        <member name="T:ReactNative.Bridge.ICallback">
            <summary>
            Interface that represents a JavaScript callback function that can be
            passed to a native module as a method parameter.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ICallback.Invoke(System.Object[])">
            <summary>
            Invokes the callback.
            </summary>
            <param name="arguments">The callback arguments.</param>
        </member>
        <member name="T:ReactNative.Bridge.IInvocationHandler">
            <summary>
            An interface for invoking methods specified by name.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.IInvocationHandler.Invoke(System.String,System.Object[])">
            <summary>
            Invoke the specified method.
            </summary>
            <param name="name">The name of the method.</param>
            <param name="args">The arguments for the method.</param>
        </member>
        <member name="T:ReactNative.Bridge.IJavaScriptBundleLoader">
            <summary>
            Stores JavaScript bundle information and allows the
            <see cref="T:ReactNative.Bridge.IReactInstance"/> to load a correct bundle through the
            <see cref="T:ReactNative.Bridge.IReactBridge"/>.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.IJavaScriptBundleLoader.SourceUrl">
            <summary>
            The source URL of the bundle.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.IJavaScriptBundleLoader.InitializeAsync">
            <summary>
            Initializes the JavaScript bundle loader.
            </summary>
            <returns>A task to await initialization.</returns>
        </member>
        <member name="M:ReactNative.Bridge.IJavaScriptBundleLoader.LoadScript(ReactNative.Bridge.IReactBridge)">
            <summary>
            Loads the bundle into a JavaScript bridge.
            </summary>
            <param name="bridge">The JavaScript bridge.</param>
        </member>
        <member name="T:ReactNative.Bridge.IJavaScriptExecutor">
            <summary>
            Interface for making JavaScript calls from native code.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.IJavaScriptExecutor.CallFunctionReturnFlushedQueue(System.String,System.String,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Call the JavaScript method from the given module.
            </summary>
            <param name="moduleName">The module name.</param>
            <param name="methodName">The method name.</param>
            <param name="arguments">The arguments.</param>
            <returns>The flushed queue of native operations.</returns>
        </member>
        <member name="M:ReactNative.Bridge.IJavaScriptExecutor.InvokeCallbackAndReturnFlushedQueue(System.Int32,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Invoke the JavaScript callback.
            </summary>
            <param name="callbackId">The callback identifier.</param>
            <param name="arguments">The arguments.</param>
            <returns>The flushed queue of native operations.</returns>
        </member>
        <member name="M:ReactNative.Bridge.IJavaScriptExecutor.FlushedQueue">
            <summary>
            Invoke the React 'flushedQueue' function.
            </summary>
            <returns>The flushed queue of native operations.</returns>
        </member>
        <member name="M:ReactNative.Bridge.IJavaScriptExecutor.SetGlobalVariable(System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Sets a global variable in the JavaScript runtime.
            </summary>
            <param name="propertyName">The global variable name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ReactNative.Bridge.IJavaScriptExecutor.RunScript(System.String,System.String)">
            <summary>
            Runs the given script.
            </summary>
            <param name="script">The script.</param>
            <param name="sourceUrl">The source URL.</param>
        </member>
        <member name="T:ReactNative.Bridge.IJavaScriptModule">
            <summary>
            An interface for JavaScript modules.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.IJavaScriptModule.InvocationHandler">
            <summary>
            The invocation handler.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.ILifecycleEventListener">
            <summary>
            Listener for application life cycle events.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ILifecycleEventListener.OnSuspend">
            <summary>
            Called when the host receives the suspend event.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ILifecycleEventListener.OnResume">
            <summary>
            Called when the host receives the resume event.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ILifecycleEventListener.OnDestroy">
            <summary>
            Called when the host is shutting down.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.INativeMethod">
            <summary>
            An interface representing native methods.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.INativeMethod.Type">
            <summary>
            The type of method.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.INativeMethod.Invoke(ReactNative.Bridge.IReactInstance,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Invoke the native method.
            </summary>
            <param name="reactInstance">The React instance.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="T:ReactNative.Bridge.INativeModule">
            <summary>
            A native module whose API can be provided to JavaScript React
            instances. 
            </summary>
            <remarks>
            <see cref="T:ReactNative.Bridge.INativeModule"/>s whose implementation is written in C#
            should extend <see cref="!:NativeModuleBase"/> or
            <see cref="!:ReactContextNativeModuleBase"/>.
            </remarks>
        </member>
        <member name="P:ReactNative.Bridge.INativeModule.CanOverrideExistingModule">
            <summary>
            Return true if you intend to override some other native module that
            was registered, e.g., as part of a different package (such as the
            core one). Trying to override without returning true from this 
            method is considered an error and will throw an exception during
            initialization. By default, all modules return false.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.INativeModule.Constants">
            <summary>
            The constants exported by this module.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.INativeModule.Methods">
            <summary>
            The methods callabke from JavaScript on this module.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.INativeModule.Name">
            <summary>
            The name of the module.
            </summary>
            <remarks>
            This will be the name used to <code>require()</code> this module
            from JavaScript.
            </remarks>
        </member>
        <member name="M:ReactNative.Bridge.INativeModule.Initialize">
            <summary>
            Called after the creation of a <see cref="T:ReactNative.Bridge.IReactInstance"/>, in
            order to initialize native modules that require the React or
            JavaScript modules.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.INativeModule.OnReactInstanceDispose">
            <summary>
            Called before a <see cref="T:ReactNative.Bridge.IReactInstance"/> is disposed.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.IOnBatchCompleteListener">
            <summary>
            Interface that will be notified when a batch of JavaScript to native
            calls has finished.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.IOnBatchCompleteListener.OnBatchComplete">
            <summary>
            Invoked when a batch of JavaScript to native calls has finished.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.IPromise">
            <summary>
            Interface that represents a JavaScript Promise which can be passed to 
            the native module as a method parameter.
            </summary>
            <remarks>
            Methods annotated with <see cref="T:ReactNative.Bridge.ReactMethodAttribute"/> that use 
            <see cref="T:ReactNative.Bridge.IPromise"/> as type of the last parameter will be marked as
            "remoteAsync" and will return a promise when invoked from JavaScript.
            </remarks>
        </member>
        <member name="M:ReactNative.Bridge.IPromise.Resolve(System.Object)">
            <summary>
            Resolve the promise with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ReactNative.Bridge.IPromise.Reject(System.String,System.String)">
            <summary>
            Report an error which wasn't caused by an exception.
            </summary>
            <param name="code">The error code.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:ReactNative.Bridge.IPromise.Reject(System.String,System.Exception)">
            <summary>
            Report an exception.
            </summary>
            <param name="code">The error code.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ReactNative.Bridge.IPromise.Reject(System.String,System.String,System.Exception)">
            <summary>
            Report an exception with a custom error message.
            </summary>
            <param name="code">The error code.</param>
            <param name="message">The error message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ReactNative.Bridge.IPromise.Reject(System.String)">
            <summary>
            Report an error which wasn't caused by an exception.
            </summary>
            <param name="message">The error message.</param>
            <remarks>
            Using this method will pass the error code "EUNSPECIFIED".
            </remarks>
        </member>
        <member name="M:ReactNative.Bridge.IPromise.Reject(System.Exception)">
            <summary>
            Reject the promise with the given exception.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:ReactNative.Bridge.IReactBridge">
            <summary>
            Interface to the JavaScript execution environment and means of
            transport for messages between JavaScript and the native environment.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.IReactBridge.CallFunction(System.String,System.String,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Calls a JavaScript function.
            </summary>
            <param name="moduleName">The module ID.</param>
            <param name="method">The method ID.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ReactNative.Bridge.IReactBridge.InvokeCallback(System.Int32,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Invokes a JavaScript callback.
            </summary>
            <param name="callbackId">The callback identifier.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ReactNative.Bridge.IReactBridge.SetGlobalVariable(System.String,System.String)">
            <summary>
            Sets a global JavaScript variable.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="jsonEncodedArgument">The JSON-encoded value.</param>
        </member>
        <member name="M:ReactNative.Bridge.IReactBridge.RunScript(System.String,System.String)">
            <summary>
            Evaluates JavaScript.
            </summary>
            <param name="script">The script.</param>
            <param name="sourceUrl">The source URL.</param>
        </member>
        <member name="T:ReactNative.Bridge.IReactCallback">
            <summary>
            Interface that represents a native callback that can be invoked from
            JavaScript.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.IReactCallback.Invoke(System.Int32,System.Int32,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Invoke the native callback.
            </summary>
            <param name="moduleId">The module ID.</param>
            <param name="methodId">The method ID.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:ReactNative.Bridge.IReactCallback.OnBatchComplete">
            <summary>
            Signals that a batch of operations is complete.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.IReactDelegateFactory">
            <summary>
            Factory interface for manufacturing method invocation delegates.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.IReactDelegateFactory.GetMethodType(System.Reflection.MethodInfo)">
            <summary>
            Extracts the native method type from the method.
            </summary>
            <param name="method">The method.</param>
            <returns>The native method type.</returns>
        </member>
        <member name="M:ReactNative.Bridge.IReactDelegateFactory.Create(ReactNative.Bridge.INativeModule,System.Reflection.MethodInfo)">
            <summary>
            Create an invocation delegate from the given method.
            </summary>
            <param name="nativeModule">The native module instance.</param>
            <param name="method">The method.</param>
            <returns>The invocation delegate.</returns>
        </member>
        <member name="M:ReactNative.Bridge.IReactDelegateFactory.Validate(System.Reflection.MethodInfo)">
            <summary>
            Check that the method is valid for <see cref="T:ReactNative.Bridge.ReactMethodAttribute"/>.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="T:ReactNative.Bridge.IReactInstance">
            <summary>
            An abstraction for the asynchronous JavaScript bridge. This provides an
            environment allowing the invocation of JavaScript methods and lets a
            set of native APIs be invokable from JavaScript as well.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.IReactInstance.NativeModules">
            <summary>
            Enumerates the available native modules.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.IReactInstance.QueueConfiguration">
            <summary>
            The React queue configuration.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.IReactInstance.Initialize">
            <summary>
            Initializes the instance.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.IReactInstance.InvokeFunction(System.String,System.String,Newtonsoft.Json.Linq.JArray,System.String)">
            <summary>
            Invokes a JavaScript function.
            </summary>
            <param name="moduleName">The module name.</param>
            <param name="method">The method ID.</param>
            <param name="arguments">The arguments.</param>
            <param name="tracingName">The tracing name.</param>
        </member>
        <member name="M:ReactNative.Bridge.IReactInstance.InvokeCallback(System.Int32,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Invokes a JavaScript callback.
            </summary>
            <param name="callbackId">The callback ID.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ReactNative.Bridge.IReactInstance.GetJavaScriptModule``1">
            <summary>
            Gets a JavaScript module instance.
            </summary>
            <typeparam name="T">Type of JavaScript module.</typeparam>
            <returns>The JavaScript module instance.</returns>
        </member>
        <member name="M:ReactNative.Bridge.IReactInstance.GetNativeModule``1">
            <summary>
            Gets a native module instance.
            </summary>
            <typeparam name="T">Type of native module.</typeparam>
            <returns>The native module instance.</returns>
        </member>
        <member name="T:ReactNative.Bridge.JavaScriptModuleBase">
            <summary>
            Base class for <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>s.
            </summary>
            <summary>
            Base class for <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>s.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.JavaScriptModuleBase.InvocationHandler">
            <summary>
            The invocation handler.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptModuleBase.Invoke(System.Object[],System.String)">
            <summary>
            Invoke a JavaScript method with the given arguments.
            </summary>
            <param name="args">The arguments.</param>
            <param name="caller">
            The name of the method. This parameter may be ignored if the name
            of the native method matches the name of the JavaScript method. The
            method name will be filled in automatically using the
            <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.
            </param>
            <remarks>
            The expectation is that <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>s will use
            this method to notify the framework of a JavaScript call to be
            executed. This is to overcome the absense of a performant "proxy"
            implementation in the .NET framework.
            </remarks>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptModuleBase.Invoke(System.String)">
            <summary>
            Invoke a JavaScript method with the given arguments.
            </summary>
            <param name="caller">
            The name of the method. This parameter may be ignored if the name
            of the native method matches the name of the JavaScript method. The
            method name will be filled in automatically using the
            <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.
            </param>
            <remarks>
            The expectation is that <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>s will use
            this method to notify the framework of a JavaScript call to be
            executed. This is to overcome the absense of a performant "proxy"
            implementation in the .NET framework.
            </remarks>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptModuleBase.Invoke(System.Object,System.String)">
            <summary>
            Invoke a JavaScript method with the given arguments.
            </summary>
            <param name="arg0">The first argument.</param>
            <param name="caller">
            The name of the method. This parameter may be ignored if the name
            of the native method matches the name of the JavaScript method. The
            method name will be filled in automatically using the
            <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.
            </param>
            <remarks>
            The expectation is that <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>s will use
            this method to notify the framework of a JavaScript call to be
            executed. This is to overcome the absense of a performant "proxy"
            implementation in the .NET framework.
            </remarks>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptModuleBase.Invoke(System.Object,System.Object,System.String)">
            <summary>
            Invoke a JavaScript method with the given arguments.
            </summary>
            <param name="arg0">The first argument.</param>
            <param name="arg1">The second argument.</param>
            <param name="caller">
            The name of the method. This parameter may be ignored if the name
            of the native method matches the name of the JavaScript method. The
            method name will be filled in automatically using the
            <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.
            </param>
            <remarks>
            The expectation is that <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>s will use
            this method to notify the framework of a JavaScript call to be
            executed. This is to overcome the absense of a performant "proxy"
            implementation in the .NET framework.
            </remarks>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptModuleBase.Invoke(System.Object,System.Object,System.Object,System.String)">
            <summary>
            Invoke a JavaScript method with the given arguments.
            </summary>
            <param name="arg0">The first argument.</param>
            <param name="arg1">The second argument.</param>
            <param name="arg2">The third argument.</param>
            <param name="caller">
            The name of the method. This parameter may be ignored if the name
            of the native method matches the name of the JavaScript method. The
            method name will be filled in automatically using the
            <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.
            </param>
            <remarks>
            The expectation is that <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>s will use
            this method to notify the framework of a JavaScript call to be
            executed. This is to overcome the absense of a performant "proxy"
            implementation in the .NET framework.
            </remarks>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptModuleBase.Invoke(System.Object,System.Object,System.Object,System.Object,System.String)">
            <summary>
            Invoke a JavaScript method with the given arguments.
            </summary>
            <param name="arg0">The first argument.</param>
            <param name="arg1">The second argument.</param>
            <param name="arg2">The third argument.</param>
            <param name="arg3">The fourth argument.</param>
            <param name="caller">
            The name of the method. This parameter may be ignored if the name
            of the native method matches the name of the JavaScript method. The
            method name will be filled in automatically using the
            <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.
            </param>
            <remarks>
            The expectation is that <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>s will use
            this method to notify the framework of a JavaScript call to be
            executed. This is to overcome the absense of a performant "proxy"
            implementation in the .NET framework.
            </remarks>
        </member>
        <member name="T:ReactNative.Bridge.JavaScriptModuleRegistration">
            <summary>
            Registration information for a <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>. Creates
            a mapping of methods to IDs.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptModuleRegistration.#ctor(System.Type)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Bridge.JavaScriptModuleRegistration"/>.
            </summary>
            <param name="moduleInterface">The module type.</param>
        </member>
        <member name="P:ReactNative.Bridge.JavaScriptModuleRegistration.ModuleInterface">
            <summary>
            The module type.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.JavaScriptModuleRegistration.Name">
            <summary>
            The module name.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptModuleRegistration.GetTracingName(System.String)">
            <summary>
            Get the tracing name for a particular module method by name.s
            </summary>
            <param name="method">The method name.</param>
            <returns>The tracing name.</returns>
        </member>
        <member name="T:ReactNative.Bridge.JavaScriptModuleRegistry">
            <summary>
            Class responsible for holding all <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>s
            registered to a <see cref="T:ReactNative.Bridge.IReactInstance"/>. Requires that
            JavaScript modules use the <see cref="T:ReactNative.Bridge.JavaScriptModuleBase"/> base
            class, and implement each of it's methods to dispatch through the
            <see cref="M:ReactNative.Bridge.JavaScriptModuleBase.Invoke(System.Object[],System.String)"/> method.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptModuleRegistry.GetJavaScriptModule``1(ReactNative.Bridge.IReactInstance)">
            <summary>
            Gets an instance of a <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>.
            </summary>
            <typeparam name="T">Type of JavaScript module.</typeparam>
            <param name="instance">The React instance.</param>
            <returns>The JavaScript module instance.</returns>
        </member>
        <member name="T:ReactNative.Bridge.JavaScriptModuleRegistry.Builder">
            <summary>
            Builder for <see cref="T:ReactNative.Bridge.JavaScriptModuleRegistry"/>.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptModuleRegistry.Builder.Add(System.Type)">
            <summary>
            Add a JavaScript module.
            </summary>
            <param name="type">The JavaScript module type.</param>
            <returns>The builder instance.</returns>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptModuleRegistry.Builder.Build">
            <summary>
            Build the JavaScript module registry.
            </summary>
            <returns>The registry.</returns>
        </member>
        <member name="T:ReactNative.Bridge.NativeArgumentsParseException">
            <summary>
            An exception thrown when converting between JavaScript and native arguments.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.NativeArgumentsParseException.#ctor">
            <summary>
            Instantiates the <see cref="T:ReactNative.Bridge.NativeArgumentsParseException"/>. 
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.NativeArgumentsParseException.#ctor(System.String)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Bridge.NativeArgumentsParseException"/>. 
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:ReactNative.Bridge.NativeArgumentsParseException.#ctor(System.String,System.Exception)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Bridge.NativeArgumentsParseException"/>. 
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ReactNative.Bridge.NativeArgumentsParseException.#ctor(System.String,System.String)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Bridge.NativeArgumentsParseException"/>.
            </summary>
            <param name="message">The exception message.</param>
            <param name="parameterName">The parameter name.</param>
        </member>
        <member name="M:ReactNative.Bridge.NativeArgumentsParseException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Bridge.NativeArgumentsParseException"/>.
            </summary>
            <param name="message">The exception message.</param>
            <param name="parameterName">The parameter name.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:ReactNative.Bridge.Queue.IMessageQueueThread">
            <summary>
            Encapsulates an action queue.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.Queue.IMessageQueueThread.RunOnQueue(System.Action)">
            <summary>
            Runs the given action on this thread. 
            </summary>
            <remarks>
            The action will be submitted to the end of the event queue
            even if it is being submitted from the same queue Thread.
            </remarks>
            <param name="action">The action.</param>
        </member>
        <member name="M:ReactNative.Bridge.Queue.IMessageQueueThread.IsOnThread">
            <summary>
            Checks whether the current thread is also the thread 
            associated with this <see cref="T:ReactNative.Bridge.Queue.IMessageQueueThread"/>.
            </summary>
            <returns>
            <b>true</b> if the current thread is associated with this
            instance, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="T:ReactNative.Bridge.Queue.IReactQueueConfiguration">
            <summary>
            Specifies which <see cref="T:ReactNative.Bridge.Queue.IMessageQueueThread"/>s must be used to run
            the various contexts of execution within React (dispatcher, native
            modules, and JS). Some of these queue *may* be the same but should be
            coded against as if they are different.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.Queue.IReactQueueConfiguration.DispatcherQueueThread">
            <summary>
            The main UI thread.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.Queue.IReactQueueConfiguration.NativeModulesQueueThread">
            <summary>
            The native modules thread.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.Queue.IReactQueueConfiguration.JavaScriptQueueThread">
            <summary>
            The JavaScript thread.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.Queue.MessageQueueThreadExtensions">
            <summary>
            Extension methods for <see cref="T:ReactNative.Bridge.Queue.IMessageQueueThread"/>s.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.Queue.MessageQueueThreadExtensions.AssertOnThread(ReactNative.Bridge.Queue.IMessageQueueThread)">
            <summary>
            Asserts <see cref="M:ReactNative.Bridge.Queue.IMessageQueueThread.IsOnThread"/>, throwing if the <b>false</b>.
            </summary>
            <param name="actionQueue">The message queue thread.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the assertion fails.
            </exception>
        </member>
        <member name="M:ReactNative.Bridge.Queue.MessageQueueThreadExtensions.CallOnQueue``1(ReactNative.Bridge.Queue.IMessageQueueThread,System.Func{``0})">
            <summary>
            Calls a function on a message queue and returns a task to await the response.
            </summary>
            <typeparam name="T">Type of response.</typeparam>
            <param name="actionQueue">The message queue thread.</param>
            <param name="func">The function.</param>
            <returns>A task to await the result.</returns>
        </member>
        <member name="T:ReactNative.Bridge.Queue.MessageQueueThreadKind">
            <summary>
            Types of <see cref="T:ReactNative.Bridge.Queue.IMessageQueueThread"/>.
            </summary>
        </member>
        <member name="F:ReactNative.Bridge.Queue.MessageQueueThreadKind.DispatcherThread">
            <summary>
            Dispatcher thread type.
            </summary>
        </member>
        <member name="F:ReactNative.Bridge.Queue.MessageQueueThreadKind.BackgroundSingleThread">
            <summary>
            Single background thread type.
            </summary>
        </member>
        <member name="F:ReactNative.Bridge.Queue.MessageQueueThreadKind.BackgroundAnyThread">
            <summary>
            Any background thread type.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.Queue.MessageQueueThreadSpec">
            <summary>
            Specification for creating a <see cref="T:ReactNative.Bridge.Queue.IMessageQueueThread"/>.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.Queue.MessageQueueThreadSpec.Name">
            <summary>
            The name of the <see cref="T:ReactNative.Bridge.Queue.IMessageQueueThread"/>.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.Queue.MessageQueueThreadSpec.Kind">
            <summary>
            The type of the <see cref="T:ReactNative.Bridge.Queue.IMessageQueueThread"/>.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.Queue.MessageQueueThreadSpec.DispatcherThreadSpec">
            <summary>
            Singleton dispatcher <see cref="T:ReactNative.Bridge.Queue.IMessageQueueThread"/> specification.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.Queue.MessageQueueThreadSpec.Create(System.String,ReactNative.Bridge.Queue.MessageQueueThreadKind)">
            <summary>
            Factory for creating <see cref="T:ReactNative.Bridge.Queue.MessageQueueThreadSpec"/>s.
            </summary>
            <param name="name">The name.</param>
            <param name="kind">The kind.</param>
            <returns>The instance.</returns>
        </member>
        <member name="T:ReactNative.Bridge.Queue.ReactQueueConfigurationSpec">
            <summary>
            Specification for creating a <see cref="T:ReactNative.Bridge.Queue.IReactQueueConfiguration"/>.
            This exists so the <see cref="T:ReactNative.Bridge.IReactInstance"/> is able to set
            exception handlers on the <see cref="T:ReactNative.Bridge.Queue.IMessageQueueThread"/>s it uses.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.Queue.ReactQueueConfigurationSpec.NativeModulesQueueThreadSpec">
            <summary>
            The native modules <see cref="T:ReactNative.Bridge.Queue.IMessageQueueThread"/> specification.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.Queue.ReactQueueConfigurationSpec.JSQueueThreadSpec">
            <summary>
            The JavaScript <see cref="T:ReactNative.Bridge.Queue.IMessageQueueThread"/> specification.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.Queue.ReactQueueConfigurationSpec.Default">
            <summary>
            The default <see cref="T:ReactNative.Bridge.Queue.ReactQueueConfigurationSpec"/> instance.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.Queue.ReactQueueConfigurationSpec.Builder">
            <summary>
            Builder for <see cref="T:ReactNative.Bridge.Queue.ReactQueueConfigurationSpec"/>.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.Queue.ReactQueueConfigurationSpec.Builder.NativeModulesQueueThreadSpec">
            <summary>
            Set the native modules <see cref="T:ReactNative.Bridge.Queue.MessageQueueThreadSpec"/>.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.Queue.ReactQueueConfigurationSpec.Builder.JSQueueThreadSpec">
            <summary>
            Set the JavaScript <see cref="T:ReactNative.Bridge.Queue.MessageQueueThreadSpec"/>.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.Queue.ReactQueueConfigurationSpec.Builder.Build">
            <summary>
            Build the <see cref="T:ReactNative.Bridge.Queue.ReactQueueConfigurationSpec"/>.
            </summary>
            <returns>The instance.</returns>
        </member>
        <member name="T:ReactNative.Bridge.ReactMethodAttribute">
            <summary>
            An attribute for annotating methods in an
            <see cref="T:ReactNative.Bridge.INativeModule"/>.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.ReflectionReactDelegateFactory">
            <summary>
            A delegate factory that uses reflection to create the native method.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.ReflectionReactDelegateFactory.Instance">
            <summary>
            The <see cref="T:ReactNative.Bridge.ReflectionReactDelegateFactory"/> instance.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ReflectionReactDelegateFactory.Create(ReactNative.Bridge.INativeModule,System.Reflection.MethodInfo)">
            <summary>
            Create an invocation delegate from the given method.
            </summary>
            <param name="module">The native module instance.</param>
            <param name="method">The method.</param>
            <returns>The invocation delegate.</returns>
        </member>
        <member name="T:ReactNative.ReactDelegateFactoryBase">
            <summary>
            Base implementation for <see cref="T:ReactNative.Bridge.IReactDelegateFactory"/>.
            </summary>
        </member>
        <member name="F:ReactNative.ReactDelegateFactoryBase.AsyncMethodType">
            <summary>
            Discriminator for asynchronous methods.
            </summary>
        </member>
        <member name="F:ReactNative.ReactDelegateFactoryBase.SyncMethodType">
            <summary>
            Discriminator for synchronous methods.
            </summary>
        </member>
        <member name="F:ReactNative.ReactDelegateFactoryBase.PromiseMethodType">
            <summary>
            Discriminator for methods with promises.
            </summary>
        </member>
        <member name="M:ReactNative.ReactDelegateFactoryBase.#ctor">
            <summary>
            Instantiates a <see cref="T:ReactNative.ReactDelegateFactoryBase"/>.
            </summary>
        </member>
        <member name="M:ReactNative.ReactDelegateFactoryBase.Create(ReactNative.Bridge.INativeModule,System.Reflection.MethodInfo)">
            <summary>
            Create an invocation delegate from the given method.
            </summary>
            <param name="nativeModule">The native module instance.</param>
            <param name="method">The method.</param>
            <returns>The invocation delegate.</returns>
        </member>
        <member name="M:ReactNative.ReactDelegateFactoryBase.GetMethodType(System.Reflection.MethodInfo)">
            <summary>
            Extracts the native method type from the method.
            </summary>
            <param name="method">The method.</param>
            <returns>The native method type.</returns>
        </member>
        <member name="M:ReactNative.ReactDelegateFactoryBase.Validate(System.Reflection.MethodInfo)">
            <summary>
            Check that the method is valid for <see cref="T:ReactNative.Bridge.ReactMethodAttribute"/>.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:ReactNative.ReactDelegateFactoryBase.CreateCallback(Newtonsoft.Json.Linq.JToken,ReactNative.Bridge.IReactInstance)">
            <summary>
            Create a callback.
            </summary>
            <param name="callbackToken">The callback ID token.</param>
            <param name="reactInstance">The React instance.</param>
            <returns>The callback.</returns>
        </member>
        <member name="M:ReactNative.ReactDelegateFactoryBase.CreatePromise(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken,ReactNative.Bridge.IReactInstance)">
            <summary>
            Create a promise.
            </summary>
            <param name="resolveToken">The resolve callback ID token.</param>
            <param name="rejectToken">The reject callback ID token.</param>
            <param name="reactInstance">The React instance.</param>
            <returns>The promise.</returns>
        </member>
    </members>
</doc>
